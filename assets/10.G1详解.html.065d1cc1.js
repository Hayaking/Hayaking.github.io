import{_ as e,V as i,W as a,a0 as l}from"./framework.1bd1ad73.js";const o={},r=l('<h2 id="一、g1有啥不一样" tabindex="-1"><a class="header-anchor" href="#一、g1有啥不一样" aria-hidden="true">#</a> 一、G1有啥不一样</h2><p>相比较于传统的6个垃圾回收器，G1有以下特点：</p><ul><li>基于Region的堆内存布局</li><li>Garbage First。垃圾优先，开创了收集器面向局部收集，且停顿时间可控的设计思路</li><li>全代回收。老年代、新生代都能回收</li><li>回收过程不一样</li><li>记忆集实现不一样</li><li>能够运用LAB（TLAB、PTLAB、GCLAB）</li></ul><h3 id="_1-1-基于region的堆内存布局" tabindex="-1"><a class="header-anchor" href="#_1-1-基于region的堆内存布局" aria-hidden="true">#</a> 1.1 基于Region的堆内存布局</h3><p>G1将堆内存分为一块一块的区域（Region），Region遵循分代垃圾回收机制有不同的角色分工：</p><ul><li>eden: 新生代</li><li>survivor： 幸存区</li><li>old：老年代</li><li>huge：巨型对象区（Humongous Region）。当一个对象特别大（大于Region大小的一半），就会被放在这里。</li></ul><blockquote><p>-XX:G1HeapRegionSize=M 调整Region大小，JVM默认将整堆划分为2048个分区</p></blockquote><p>每个Region会被分为若干个512字节的卡页（Card Page）</p><h3 id="_1-2-garbage-first" tabindex="-1"><a class="header-anchor" href="#_1-2-garbage-first" aria-hidden="true">#</a> 1.2 Garbage First</h3><p>G1每次垃圾回收的内存大小是Region整数倍，是堆内存的一小部分。因此不会出现整个JVM堆都处于垃圾回收状态中。 其次G1的停顿时长可控。</p><p>具体思路就是让G1收集器维护每个Region的权重，即回收能获得的空间大小、回收所需的时间。</p><p>然后在维护一个优先级列表，根据用户设定允许的收集停顿时间，处理回收权重大的Region</p><blockquote><p>-XX:MaxGCPauseMillis 调整停顿时间，默认200ms</p></blockquote><h3 id="_1-3-全代回收" tabindex="-1"><a class="header-anchor" href="#_1-3-全代回收" aria-hidden="true">#</a> 1.3 全代回收</h3><p>G1中提供了三种垃圾回收模式： YoungGC、 Mixed GC和Full GC， 在不同的条件下被触发。</p><h3 id="_1-4-回收过程" tabindex="-1"><a class="header-anchor" href="#_1-4-回收过程" aria-hidden="true">#</a> 1.4 回收过程</h3><ol><li>初始标记: stw</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ol><h3 id="_1-5-记忆集实现不一样" tabindex="-1"><a class="header-anchor" href="#_1-5-记忆集实现不一样" aria-hidden="true">#</a> 1.5 记忆集实现不一样</h3><p>G1会有跨Region引用的问题。与之前的垃圾回收器的跨代引用一样，需要引入一个记忆集去记录，避免遍历整个堆。</p><blockquote><p>G1的记忆集叫做RSet，每个Region都有自己的RSet</p></blockquote><h4 id="_1-5-1-rset与card-table的不同" tabindex="-1"><a class="header-anchor" href="#_1-5-1-rset与card-table的不同" aria-hidden="true">#</a> 1.5.1 RSet与Card Table的不同</h4><ul><li>Card Table记录的是我引用了谁的对象</li><li>RSet记录的是谁引用了我，即其他 Region 中的对象引用本 Region 中对象的关系</li></ul><p>默认是一种哈希表，key是别的Region的起始地址，value是一个数组，数组中存储的是引用该Region的卡页</p><h4 id="_1-5-2-prt" tabindex="-1"><a class="header-anchor" href="#_1-5-2-prt" aria-hidden="true">#</a> 1.5.2 PRT</h4><p>RSet在内部使用Per Region Table(PRT)记录分区的引用情况。</p><p>如果一个分区被很多分区引用，那么这个分区的RSet(PRT)就会特别大，也会降低整个Region的可用空间。</p><p>为了应对这个问题，PRT有3种实现：</p><ul><li>稀疏表：采用哈希表，记录region、卡表数组</li><li>细粒度：当稀疏表的卡表数组大小达到阈值时，将数组替换为PerRegionTable（位图实现的），减小内存占用</li><li>粗粒度位图：当细粒度的也达到阈值时，退化到位图，只记录哪个分区引用了该分区</li></ul><h3 id="_1-6-能够运用lab" tabindex="-1"><a class="header-anchor" href="#_1-6-能够运用lab" aria-hidden="true">#</a> 1.6 能够运用LAB</h3><p>LAB(Local allocation buffer)，有3种类型：</p><ul><li>TLAB: 用户线程本地分配缓存。线程专用的Eden区的Region</li><li>PTLAB：用户线程晋升本地分配缓存。线程专用的Survivor、Old区的Region</li><li>GCLAB: GC线程本地分配缓存。gc线程专用的region，用于中转对象</li></ul><h4 id="_1-6-1-那么问什么需要lab呢" tabindex="-1"><a class="header-anchor" href="#_1-6-1-那么问什么需要lab呢" aria-hidden="true">#</a> 1.6.1 那么问什么需要LAB呢？</h4><p>防止多线程操作同一块内存区域（Region），减少多线程同步带来的开销，提高对象分配、GC的效率</p><h2 id="二、stab" tabindex="-1"><a class="header-anchor" href="#二、stab" aria-hidden="true">#</a> 二、STAB</h2><p>并发标记阶段，有引用关系变更怎么办？这个由原始快照STAB( Snapshot At The Beginning)机制保证，在GC之前对整个堆进行一次对象索引关系，形成位图，相当于堆的逻辑快照。</p><p>引用关系变更时，会有写前屏障将变更写到STAB缓冲区中。</p><p>并发标记阶段，GC线程会检查缓冲区，并将变更同步到STAB快照上。</p><h2 id="三、cset" tabindex="-1"><a class="header-anchor" href="#三、cset" aria-hidden="true">#</a> 三、CSet</h2><p>收集集合(CSet)。记录着等待回收的region，CSet中可能存放着各个分代的Region。CSet中的存活对象会在gc中被移动（复制）。GC后CSet中的region会成为可用分区。</p><p>CSet有两种:</p><ul><li>年轻代CSet：只存放年轻代Region</li><li>老年代CSet：只存放老年代Region</li></ul><h2 id="四、详解回收过程" tabindex="-1"><a class="header-anchor" href="#四、详解回收过程" aria-hidden="true">#</a> 四、详解回收过程</h2><ul><li>初始标记（Initial Marking） stw</li></ul><blockquote><p>仅仅知识标记一下GC Roots能关联到的对象，并修改TAMS指针的值，让下一阶段用户线程并发运行时， 能正确地在可用Region空间中分配新对象。这个阶段需要停顿线程（根节点枚举都是要STW的）</p></blockquote><ul><li>并发标记（Concurrent Marking）</li></ul><blockquote><p>从GC Roots开始对堆中对象进行可达性分析，使用三色标记算法，是并发的不会stw。 扫描完成后，重新处理SATB，处理STAB缓冲区中记录的扫描时发生变动的引用。</p></blockquote><ul><li>最终标记（Final Marking） stw</li></ul><blockquote><p>对用户线程做另一个短暂停顿，用于处理并发阶段结束后仍未完成标记工作</p></blockquote><ul><li>筛选回收（Live Data Counting and Evacuation） stw</li></ul><blockquote><p>根据每个Region的权重，以及用户所期盼的停顿时间来制定回收计划。可以自由选择多个Region构成回收集，然后把决定回收的Region中存活对象复制到空的Region，再清理掉旧的Region的全部空间。这里的操作涉及存活对象的移动，必须暂停相关的用户线程。</p></blockquote>',50),n=[r];function t(h,d){return i(),a("div",null,n)}const u=e(o,[["render",t],["__file","10.G1详解.html.vue"]]);export{u as default};
