import{_ as e,V as l,W as a,Y as r}from"./framework.591e63b2.js";const o={},i=r('<h2 id="一、什么是zab协议" tabindex="-1"><a class="header-anchor" href="#一、什么是zab协议" aria-hidden="true">#</a> 一、什么是ZAB协议</h2><p>ZAB 协议是为分布式协调服务 Zookeeper 专门设计的一种支持 崩溃恢复 和 原子广播 协议。</p><h2 id="二、zookeeper集群中的角色" tabindex="-1"><a class="header-anchor" href="#二、zookeeper集群中的角色" aria-hidden="true">#</a> 二、Zookeeper集群中的角色</h2><ul><li>Leader：有且只有一个Leader，它会发起并维护与各Follower及Observer间的心跳。所有的写操作必须要通过Leader完成再由Leader将写操作广播给其它服务器</li><li>Follower：一个ZooKeeper集群可能同时存在多个Follower，它会响应Leader的心跳。Follower可直接处理并返回客户端的读请求，同时会将写请求转发给Leader处理，并且负责在Leader处理写请求时对请求进行投票</li><li>Observer 角色与Follower类似，但是无投票权，不参与选举</li></ul><h2 id="三、zab实现" tabindex="-1"><a class="header-anchor" href="#三、zab实现" aria-hidden="true">#</a> 三、ZAB实现</h2><p>原子广播： 所有的写操作都必须由Leader完成，Leader写入本地日志后再同步给所有的Follower节点。</p><p>崩溃恢复： 当Leader节点无法工作，根据ZAB协议能够自动从Follower节点中重新选出一个合适的替代者，即新的Leader，该过程即为领导选举。该领导选举过程，是ZAB协议中最为重要和复杂的过程。</p><h3 id="_3-1-原子广播" tabindex="-1"><a class="header-anchor" href="#_3-1-原子广播" aria-hidden="true">#</a> 3.1 原子广播</h3><p>两阶段提交。leader负责给所有follower同步写操作</p><ul><li>当有一半以上的follower回复正确的ack时，leader会发起commit操作。</li><li>当有小于一半的follower回复正确的ack时，leader不会发起commit操作。</li></ul><blockquote><p>没有commit的数据，对客户端不可见</p></blockquote><h3 id="_3-2-崩溃恢复" tabindex="-1"><a class="header-anchor" href="#_3-2-崩溃恢复" aria-hidden="true">#</a> 3.2 崩溃恢复</h3><p>先来了解下下面几个关于zookeeper的字段：</p><ul><li>服务器 ID(myid)：编号越大在选举算法中权重越大</li><li>事务 ID(zxid)：值越大说明数据越新，权重越大</li><li>逻辑时钟(epoch-logicalclock)：同一轮投票过程中的逻辑时钟值是相同的，每投完一次值会增加</li><li>选举状态： <ul><li>LOOKING: 竞选状态</li><li>FOLLOWING: 随从状态，同步 leader 状态，参与投票</li><li>OBSERVING: 观察状态，同步 leader 状态，不参与投票</li><li>LEADING: 领导者状态</li></ul></li></ul><p>？？？？？？？？？？？好复杂，不写了</p>',15),d=[i];function c(h,t){return l(),a("div",null,d)}const s=e(o,[["render",c],["__file","4.zab.html.vue"]]);export{s as default};
