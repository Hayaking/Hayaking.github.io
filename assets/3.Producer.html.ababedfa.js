import{_ as t,V as e,W as p,X as n,Z as c,$ as o,Y as s,y as l}from"./framework.44032428.js";const i="/assets/java/kafka/1.png",u={},r=s('<h2 id="一、什么是producer" tabindex="-1"><a class="header-anchor" href="#一、什么是producer" aria-hidden="true">#</a> 一、什么是Producer</h2><p>负责生成并发送消息到kafka的一方称之为生产者（Producer）</p><h2 id="二、生产者发送消息全流程" tabindex="-1"><a class="header-anchor" href="#二、生产者发送消息全流程" aria-hidden="true">#</a> 二、生产者发送消息全流程</h2><p><img src="'+i+`" alt="" loading="lazy"></p><p>消息想从 Producer发送到 Broker，必须要先知道Topic在Broker的分布情况，才能判断消息该发往哪些节点，比如：</p><ul><li>Topic 对应的 Leader 分区有哪些</li><li>Leader分区分布在哪些 Broker 节点</li><li>Topic 分区动态变更等</li></ul><p>所以Producer在向Broker发数据前会先获取以下topic的元数据，根据元数据再决定数据发给那个broker，具体流程如下：</p><ol><li>将消息包装成ProducerRecord</li><li>序列化</li><li>获取topic元数据信息，分配消息写入到topic哪个分区上</li><li>缓冲区</li><li>发往同一个topic的消息会被放sender线程发送给对应的broker</li><li>服务器在收到这些消息时会返回一个响应 如果消息成功写入kafka,就返回一个RecordMetaData对象，它包含了主题和分区信息，以及记录在分区里的偏移量。 如果写入失败，则会返回一个错误。生产者在收到错误之后会尝试重新发送消息，几次之后如果还是失败，就返回错误信息。</li></ol><h2 id="三、生产者参数调优" tabindex="-1"><a class="header-anchor" href="#三、生产者参数调优" aria-hidden="true">#</a> 三、生产者参数调优</h2><table><tr><td>参数名</td><td>作用</td><td>默认值</td><td>推荐值</td></tr><tr><td>retries</td><td>发送消息失败后，重试次数</td><td>3</td><td></td></tr><tr><td>retries.backoff.ms</td><td>每次重试的时间间隔</td><td>100ms</td><td></td></tr><tr><td>acks</td><td> 应答策略 <br> -1 消息发送到leader分区，然后还需要被同步到ISR副本分区才算成功 <br> 0 消息被broker接收到就算成功 <br> 1 消息被leader分区接收到结算成功 <br></td><td>1</td><td>1</td></tr><tr><td>batch.size</td><td>消息批次大小</td><td>16kb</td><td></td></tr><tr><td>linger.ms</td><td> 超时等待时间 <br> 避免消息因为batch.size而迟迟没有发送出去 </td><td>0ms</td><td></td></tr><tr><td>buffer.memory</td><td> 缓冲区大小 <br> 如果缓冲区设置太小的话，容易满，一旦缓冲区满了，就会阻塞上游业务 </td><td>32MB</td><td></td></tr><tr><td>metadata.max.age.ms</td><td>元数据过期时间</td><td>5分钟</td><td></td></tr></table><h2 id="四、拦截器" tabindex="-1"><a class="header-anchor" href="#四、拦截器" aria-hidden="true">#</a> 四、拦截器</h2><p>拦截即将发送的消息，可以在这里给消息做一些修改什么的</p><h3 id="_4-1-自定义拦截器" tabindex="-1"><a class="header-anchor" href="#_4-1-自定义拦截器" aria-hidden="true">#</a> 4.1 自定义拦截器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">ProducerRecord</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RecordMetadata</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerInterceptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">onSend</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在这里拦截并处理即将发给broker的消息</span>
       <span class="token comment">// record.topic()</span>
       <span class="token comment">// record.partition()</span>
       <span class="token comment">// record.timestamp()</span>
       <span class="token comment">// record.key()</span>
       <span class="token comment">// record.value()</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAcknowledgement</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、序列化器" tabindex="-1"><a class="header-anchor" href="#五、序列化器" aria-hidden="true">#</a> 五、序列化器</h2><p>最常用的就是org.apache.kafka.common.serialization.StringSerializer，直接发送json字符串就行。</p><h3 id="_5-1-自定义序列化器" tabindex="-1"><a class="header-anchor" href="#_5-1-自定义序列化器" aria-hidden="true">#</a> 5.1 自定义序列化器</h3>`,17),d={href:"https://blog.csdn.net/u013256816/article/details/78657982",target:"_blank",rel:"noopener noreferrer"},k=s(`<p>下面展示使用ByteBuffer存储对象值，最后转成byte数组的序列化方式。肯定是比json字符串省空间了，但是想支持复杂嵌套的结构可能不太行。此外producer这边如果自定义序列化器，那么consumer那边也要自定义反序列化器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoSerializer</span> <span class="token keyword">implements</span> <span class="token class-name">Serializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Company</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isKey<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Company</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> name<span class="token punctuation">,</span> address<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                name <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                address <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span>name<span class="token punctuation">.</span>length <span class="token operator">+</span> address<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            buffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            buffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定序列化器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;value.serializer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;com.hidden.client.DemoSerializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六、分区器" tabindex="-1"><a class="header-anchor" href="#六、分区器" aria-hidden="true">#</a> 六、分区器</h2><p><mark>！！网上的八股文好多错的</mark></p><ul><li>DefaultPartitioner，默认分区器 <ul><li>如果有指定key，根据key的hashcode，与分区总数取余，根据计算结果选择分区。有key的情况下是这个策略</li><li>如果没有指定key，会随机选取一个分区，并缓存这个分区号保证之后一直发送给这个分区。StickyPartition 随机粘性分区</li></ul></li><li>RoundRobinPartitioner，轮询策略，消息会先发给第一个分区，然后再发给第二个....然后再从头。默认没有key的情况下是轮询策略</li><li>UniformStickyPartitioner，纯粹的粘性分区器，与DefaultPartitioner不同的是，不管你有没有key，他都是随机选一个分区，燃弧一直发给这个分区</li><li>自定义分区策略</li></ul><h3 id="_6-1-自定义分区器" tabindex="-1"><a class="header-anchor" href="#_6-1-自定义分区器" aria-hidden="true">#</a> 6.1 自定义分区器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Partitioner</span> <span class="token keyword">extends</span> <span class="token class-name">Configurable</span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 返回分区号</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>
            <span class="token class-name">String</span> topic<span class="token punctuation">,</span> 
            <span class="token class-name">Object</span> key<span class="token punctuation">,</span> 
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> 
            <span class="token class-name">Object</span> value<span class="token punctuation">,</span> 
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> 
            <span class="token class-name">Cluster</span> cluster
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function v(m,b){const a=l("ExternalLinkIcon");return e(),p("div",null,[r,n("p",null,[n("a",d,[c("参考"),o(a)])]),k])}const f=t(u,[["render",v],["__file","3.Producer.html.vue"]]);export{f as default};
