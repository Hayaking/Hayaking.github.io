const e=JSON.parse('{"key":"v-38f80de0","path":"/java/JVM/gc/5.%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.html","title":"5.Java垃圾收集器","lang":"zh-CN","frontmatter":{"author":"haya","title":"5.Java垃圾收集器","date":"2021-02-28T00:00:00.000Z","article":true,"timeline":true,"category":["java"],"tag":["java","jvm","gc"],"description":"collectors 一、新生代 1. Serial（单线程、 复制算法） 只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。 虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限 定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/java/JVM/gc/5.%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Haya的博客"}],["meta",{"property":"og:title","content":"5.Java垃圾收集器"}],["meta",{"property":"og:description","content":"collectors 一、新生代 1. Serial（单线程、 复制算法） 只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。 虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限 定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-30T08:44:30.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"haya"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jvm"}],["meta",{"property":"article:tag","content":"gc"}],["meta",{"property":"article:published_time","content":"2021-02-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-30T08:44:30.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"一、新生代","slug":"一、新生代","link":"#一、新生代","children":[{"level":3,"title":"1. Serial（单线程、 复制算法）","slug":"_1-serial-单线程、-复制算法","link":"#_1-serial-单线程、-复制算法","children":[]},{"level":3,"title":"2. ParNew（多线程、复制算法）","slug":"_2-parnew-多线程、复制算法","link":"#_2-parnew-多线程、复制算法","children":[]},{"level":3,"title":"3. Parallel Scavenge （多线程、复制算法）","slug":"_3-parallel-scavenge-多线程、复制算法","link":"#_3-parallel-scavenge-多线程、复制算法","children":[]}]},{"level":2,"title":"二、老年代","slug":"二、老年代","link":"#二、老年代","children":[{"level":3,"title":"1. Serial Old（单线程、标记整理算法 ）","slug":"_1-serial-old-单线程、标记整理算法","link":"#_1-serial-old-单线程、标记整理算法","children":[]},{"level":3,"title":"2. Parallel Old（多线程、标记整理算法 ）","slug":"_2-parallel-old-多线程、标记整理算法","link":"#_2-parallel-old-多线程、标记整理算法","children":[]},{"level":3,"title":"3. CMS 收集器（多线程、标记清除算法）","slug":"_3-cms-收集器-多线程、标记清除算法","link":"#_3-cms-收集器-多线程、标记清除算法","children":[]}]},{"level":2,"title":"三、G1收集器","slug":"三、g1收集器","link":"#三、g1收集器","children":[]}],"git":{"createdTime":1672389870000,"updatedTime":1672389870000,"contributors":[{"name":"guohaoyang","email":"haoyang.guo@duobei.com","commits":1}]},"readingTime":{"minutes":3.59,"words":1076},"autoDesc":true,"localizedDate":"2021年2月28日","filePathRelative":"java/JVM/gc/5.垃圾收集器.md"}');export{e as data};
