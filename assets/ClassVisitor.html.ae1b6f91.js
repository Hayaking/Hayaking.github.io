import{_ as s,V as n,W as a,a0 as p}from"./framework.1bd1ad73.js";const t={},e=p(`<h2 id="一、什么是classvisitor" tabindex="-1"><a class="header-anchor" href="#一、什么是classvisitor" aria-hidden="true">#</a> 一、什么是ClassVisitor</h2><p>通过ClassVisitor，可以对class文件进行访问或修改</p><p>以下是ClassVisitor中的方法，通过继承ClassVisitor，并对需要的方法进行重写，就可以做到访问或修改class文件中的内容了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>visit
visitSource
visitModule
visitNestHost
visitOuterClass
visitAnnotation
visitTypeAnnotation
visitAttribute
visitNestMember
visitPermittedSubclass
visitInnerClass
visitRecordComponent
visitField
visitMethod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、使用" tabindex="-1"><a class="header-anchor" href="#二、使用" aria-hidden="true">#</a> 二、使用</h2><p>打印类名、成员变量、注解、方法的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPrinter</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ClassPrinter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">ClassPrinter</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">int</span> version<span class="token punctuation">,</span> <span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span> superName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>version<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> superName<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;类名: {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> descriptor<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;方法: {}&quot;</span> <span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AnnotationVisitor</span> <span class="token function">visitAnnotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> descriptor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;注解: {}&quot;</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitAnnotation</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">FieldVisitor</span> <span class="token function">visitField</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> descriptor<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;成员变量: {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitField</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> fullClassName <span class="token operator">=</span> <span class="token string">&quot;全类名&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> classReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>fullClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> visitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPrinter</span><span class="token punctuation">(</span><span class="token constant">ASM9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        classReader<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 类名<span class="token operator">:</span> 全类名
<span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 注解<span class="token operator">:</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Deprecated</span><span class="token punctuation">;</span>
<span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 成员变量<span class="token operator">:</span> id
<span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 成员变量<span class="token operator">:</span> name
<span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 方法<span class="token operator">:</span> <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span>
<span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 方法<span class="token operator">:</span> getId
<span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 方法<span class="token operator">:</span> setId
<span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 方法<span class="token operator">:</span> getName
<span class="token number">22</span><span class="token operator">/</span><span class="token number">09</span><span class="token operator">/</span><span class="token number">28</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29</span> <span class="token constant">INFO</span> <span class="token class-name"><span class="token namespace">haya<span class="token punctuation">.</span></span>ClassPrinter</span><span class="token operator">:</span> 方法<span class="token operator">:</span> setName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[e];function c(l,i){return n(),a("div",null,o)}const r=s(t,[["render",c],["__file","ClassVisitor.html.vue"]]);export{r as default};
