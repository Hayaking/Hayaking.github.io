import{_ as n,V as s,W as a,Y as t}from"./framework.591e63b2.js";const p={},e=t(`<h2 id="一、实现效果" tabindex="-1"><a class="header-anchor" href="#一、实现效果" aria-hidden="true">#</a> 一、实现效果</h2><p>用filter分流有filter算子重复计算的问题，于是乎就想到了用旁路输出分流日志，设计效果如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// kafka topic中读取的事件流</span>
<span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token comment">// TopicStreamHolder持有stream，并通过XXXFunction将不同的事件分流</span>
<span class="token keyword">var</span> topicHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopicStreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XXXFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取FirstAudioFrame的outPutTag</span>
<span class="token keyword">var</span> outputTag <span class="token operator">=</span> <span class="token function">getOutputTag</span><span class="token punctuation">(</span><span class="token class-name">FirstAudioFrame</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// LogStreamHolder使用outputTag从TopicStreamHolder的输出流中获取对应的事件流</span>
<span class="token keyword">var</span> logStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogStreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>topicHolder<span class="token punctuation">,</span> outputTag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、具体实现" tabindex="-1"><a class="header-anchor" href="#二、具体实现" aria-hidden="true">#</a> 二、具体实现</h2><h3 id="_2-1-streamholder" tabindex="-1"><a class="header-anchor" href="#_2-1-streamholder" aria-hidden="true">#</a> 2.1 StreamHolder</h3><p>定义StreamHolder接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-topicstreamholder" tabindex="-1"><a class="header-anchor" href="#_2-2-topicstreamholder" aria-hidden="true">#</a> 2.2 TopicStreamHolder</h3><p>TopicStreamHolder实现StreamHolder接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicStreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">StreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 输入流</span>
    <span class="token keyword">private</span> <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">&gt;</span></span> stream<span class="token punctuation">;</span>
    <span class="token comment">// 输出流</span>
    <span class="token keyword">private</span> <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> processedStream<span class="token punctuation">;</span>
    <span class="token comment">// 分流函数</span>
    <span class="token keyword">private</span> <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> processFunction<span class="token punctuation">;</span>
    <span class="token comment">// 分流函数并行度</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> parallelism<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TopicStreamHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">TopicStreamHolder</span><span class="token punctuation">(</span>
            <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">&gt;</span></span> stream<span class="token punctuation">,</span>
            <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> processFunction
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> processFunction<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">TopicStreamHolder</span><span class="token punctuation">(</span>
            <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">&gt;</span></span> stream<span class="token punctuation">,</span>
            <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> processFunction<span class="token punctuation">,</span>
            <span class="token keyword">int</span> parallelism
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stream <span class="token operator">=</span> stream<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>processFunction <span class="token operator">=</span> processFunction<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parallelism <span class="token operator">=</span> parallelism<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>processedStream <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            processedStream <span class="token operator">=</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token comment">// 应用分流函数</span>
                    <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>processFunction<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span>parallelism<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> processedStream<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stream<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-logstreamholder" tabindex="-1"><a class="header-anchor" href="#_2-3-logstreamholder" aria-hidden="true">#</a> 2.3 LogStreamHolder</h3><p>利用装饰器模式，让LogStreamHolder持有TopicStreamHolder</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// PI、PO是TopicStreamHolder的输入输出类型</span>
<span class="token comment">// I、O是LogStreamHolder的输入输出类型</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogStreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span> <span class="token keyword">extends</span> PO<span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">,</span> PI<span class="token punctuation">,</span> PO<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">TopicStreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span>PI<span class="token punctuation">,</span> PO<span class="token punctuation">&gt;</span></span> holder<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> outputTag<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LogStreamHolder</span><span class="token punctuation">(</span>
            <span class="token class-name">TopicStreamHolder</span><span class="token generics"><span class="token punctuation">&lt;</span>PI<span class="token punctuation">,</span> PO<span class="token punctuation">&gt;</span></span> holder<span class="token punctuation">,</span>
            <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> outputTag
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>holder <span class="token operator">=</span> holder<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>outputTag <span class="token operator">=</span> outputTag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据outputTag获取对应的事件流</span>
        <span class="token keyword">return</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span>outputTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// TopicStreamHolder的输出流就是LogStreamHolder输入流</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> holder<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-分流函数xxxfunction" tabindex="-1"><a class="header-anchor" href="#_2-4-分流函数xxxfunction" aria-hidden="true">#</a> 2.4 分流函数XXXFunction</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXXFunction</span> <span class="token keyword">extends</span> <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">XXXLog</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span>
            <span class="token class-name">String</span> value<span class="token punctuation">,</span>
            <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">XXXLog</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span>Context ctx<span class="token punctuation">,</span>
            <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XXXLog</span><span class="token punctuation">&gt;</span></span> out
    <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 正则提取出事件类型</span>
        <span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token class-name">LogUtils</span><span class="token punctuation">.</span><span class="token function">getMatchType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 根据事件类型获取枚举 </span>
        <span class="token keyword">var</span> typeEnum <span class="token operator">=</span> <span class="token class-name">XXXLogType</span><span class="token punctuation">.</span><span class="token function">getEnumByType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">output</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> typeEnum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>
            <span class="token class-name">String</span> value<span class="token punctuation">,</span>
            <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">PaasLog</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span>Context ctx<span class="token punctuation">,</span>
            <span class="token class-name">PaasLogType</span> typeEnum
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取时间对应的java类</span>
            <span class="token keyword">var</span> clazz <span class="token operator">=</span> typeEnum<span class="token punctuation">.</span><span class="token function">getClazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// json序列化成对象</span>
            <span class="token keyword">var</span> log <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取outputTag</span>
            <span class="token keyword">var</span> outputTag <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XXXLog</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> typeEnum<span class="token punctuation">.</span><span class="token function">getOutputTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>outputTag <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 旁路输出</span>
            ctx<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>outputTag<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","封装旁路输出操作去分流kafka消息.html.vue"]]);export{k as default};
