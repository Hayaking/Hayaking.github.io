import{_ as n,V as s,W as a,X as e}from"./framework.7aad78ec.js";const t={},p=e(`<h2 id="mergetree" tabindex="-1"><a class="header-anchor" href="#mergetree" aria-hidden="true">#</a> MergeTree</h2><ul><li>按主键排序</li><li>按分区键分区</li><li>支持数据副本</li><li>支持数据采样</li></ul><p>主键默认和排序键一样。如果需要特别设置主键，主键必须是排序键前缀。</p><blockquote><p>主键、排序键不能为Null</p></blockquote><h3 id="建表示例" tabindex="-1"><a class="header-anchor" href="#建表示例" aria-hidden="true">#</a> 建表示例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> db<span class="token punctuation">.</span>tableName<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">\`</span>date<span class="token punctuation">\`</span></span> <span class="token keyword">Date</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>timestamp<span class="token punctuation">\`</span></span> DateTime64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span> String
    <span class="token comment">-- ....</span>
<span class="token punctuation">)</span>
<span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree
<span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token keyword">date</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">,</span><span class="token keyword">type</span><span class="token punctuation">)</span>
SETTINGS index_granularity <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aggregatingmergetree" tabindex="-1"><a class="header-anchor" href="#aggregatingmergetree" aria-hidden="true">#</a> AggregatingMergeTree</h2><p>具有MergeTree的基本特性。不同的是AggregatingMergeTree会合并主键相同的数据。</p><h3 id="建表示例-1" tabindex="-1"><a class="header-anchor" href="#建表示例-1" aria-hidden="true">#</a> 建表示例</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> db<span class="token punctuation">.</span>tableName<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">\`</span>date<span class="token punctuation">\`</span></span> <span class="token keyword">Date</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>timestamp<span class="token punctuation">\`</span></span> DateTime64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>channel_name<span class="token punctuation">\`</span></span> String<span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>channel_id<span class="token punctuation">\`</span></span> String<span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>session_id<span class="token punctuation">\`</span></span> String<span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>stream_id<span class="token punctuation">\`</span></span> String<span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>uid<span class="token punctuation">\`</span></span> String<span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>width<span class="token punctuation">\`</span></span> SimpleAggregateFunction<span class="token punctuation">(</span>anyLast<span class="token punctuation">,</span> Nullable<span class="token punctuation">(</span>Int32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>height<span class="token punctuation">\`</span></span> SimpleAggregateFunction<span class="token punctuation">(</span>anyLast<span class="token punctuation">,</span>Nullable<span class="token punctuation">(</span>Int32<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token keyword">ENGINE</span> <span class="token operator">=</span> AggregatingMergeTree
<span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token keyword">date</span>
<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">,</span>channel_name<span class="token punctuation">,</span>uid<span class="token punctuation">,</span> session_id<span class="token punctuation">,</span>stream_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">,</span><span class="token keyword">timestamp</span><span class="token punctuation">,</span>channel_name<span class="token punctuation">,</span>uid<span class="token punctuation">,</span>session_id<span class="token punctuation">,</span>stream_id<span class="token punctuation">)</span>
SETTINGS index_granularity <span class="token operator">=</span> <span class="token number">8192</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AggregatingMergeTree会合并(date,timestamp,channel_name,uid,session_id,stream_id)相同的数据。如上述ddl所示，主键外的字段width、height使用的是SimpleAggregateFunction(anyLast, ...)，这代表着在合并数据时会保留最新的后写入的数据。</p>`,11),i=[p];function o(c,l){return s(),a("div",null,i)}const r=n(t,[["render",o],["__file","MergeTree.html.vue"]]);export{r as default};
