import{_ as n,V as a,W as s,Y as e}from"./framework.591e63b2.js";const t={},p=e(`<h2 id="一、处理线程池内的线程的异常" tabindex="-1"><a class="header-anchor" href="#一、处理线程池内的线程的异常" aria-hidden="true">#</a> 一、处理线程池内的线程的异常</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ExecutorService</span> executorService<span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span>  executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2</span>
        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>在runnable中使用try-catch去捕获所有异常，自己可以处理并打印异常；</p></li><li><p>如果在runnable中不使用try-catch去捕获异常，那么submit方法会吞掉异常，execute会抛出异常：</p></li></ol><ul><li>execute的异常会在子线程中抛出；</li><li>而submit的话，当调用其返回的future的get方法时，会在main线程抛出异常的，不调用就不会抛出。</li></ul><p>如何处理第二种情况？</p><p>在创建线程池的时候，自定义线程工厂，为创建的线程设置未捕获异常处理器，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ThreadFactory</span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">setDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，当执行execute、future.get()时，如果发生异常，那么异常就会交由ExceptionHandler去处理。</p><h2 id="二、有异常的线程会怎么样" tabindex="-1"><a class="header-anchor" href="#二、有异常的线程会怎么样" aria-hidden="true">#</a> 二、有异常的线程会怎么样</h2><p>会终止掉</p><blockquote><p>终止掉的线程无法再被复用，所以还是要尽可能的去处理异常</p></blockquote>`,11),c=[p];function o(l,u){return a(),s("div",null,c)}const r=n(t,[["render",o],["__file","线程池与异常.html.vue"]]);export{r as default};
