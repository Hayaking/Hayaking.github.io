import{_ as o,V as c,W as i,X as n,a0 as s,Z as a,$ as l,Y as r,y as e}from"./framework.591e63b2.js";const u={},d=n("h2",{id:"一、dubbo-spi与java-spi的不同",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、dubbo-spi与java-spi的不同","aria-hidden":"true"},"#"),s(" 一、Dubbo SPI与Java SPI的不同")],-1),k=r(`<ul><li>Dubbo SPI配置文件的目录是在/META-INF/dubbo、/META-INF/dubbo/internal/ 下，Java SPI则在/META-INF/services/</li><li>Dubbo SPI配置文件中每一行写的是kv结构（扩展名=全类名），Java SPI则是全类名</li></ul><h2 id="二、为什么dubbo使用kv声明spi文件" tabindex="-1"><a class="header-anchor" href="#二、为什么dubbo使用kv声明spi文件" aria-hidden="true">#</a> 二、为什么Dubbo使用KV声明SPI文件</h2><p>下面是dubbo源码中的例子</p><p>/META-INF/dubbo/internal/org.apache.dubbo.rpc.protocol.tri.compressor.Compressor</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gzip=org.apache.dubbo.rpc.protocol.tri.compressor.Gzip
bzip2=org.apache.dubbo.rpc.protocol.tri.compressor.Bzip2
snappy=org.apache.dubbo.rpc.protocol.tri.compressor.Snappy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到一个Compressor接口拥有三个实现类，如果用Java SPI加载的话，这三个实现类都会被实例化，而实际情况中只会使用一个实现类，那就会有两个类的对象没有用武之地，就是浪费。而使用Dubbo SPI的话，只需要指定扩展名，就可以只加载对应的实现类，这样就不会浪费内存了。</p><blockquote><p>为什么不直接在代码里做判断，然后实例化对应的类？</p><p>说到底还是开闭原则。如果在代码里做判断，实例化对应的类，那么别人想扩展也没法直接扩展了。</p></blockquote><h2 id="三、-spi" tabindex="-1"><a class="header-anchor" href="#三、-spi" aria-hidden="true">#</a> 三、@SPI</h2><p>这个注解是用来声明扩展点的，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 标注这个接口是个扩展点</span>
<span class="token annotation punctuation">@SPI</span><span class="token punctuation">(</span>scope <span class="token operator">=</span> <span class="token class-name">ExtensionScope</span><span class="token punctuation">.</span><span class="token constant">FRAMEWORK</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Compressor</span> <span class="token keyword">extends</span> <span class="token class-name">MessageEncoding</span> <span class="token punctuation">{</span>

    <span class="token class-name">Compressor</span> <span class="token constant">NONE</span> <span class="token operator">=</span> <span class="token class-name">Identity</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token class-name">Compressor</span> <span class="token function">getCompressor</span><span class="token punctuation">(</span><span class="token class-name">FrameworkModel</span> frameworkModel<span class="token punctuation">,</span> <span class="token class-name">String</span> compressorStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> compressorStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>compressorStr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Identity</span><span class="token punctuation">.</span><span class="token constant">MESSAGE_ENCODING</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">NONE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 根据扩展名获取Compressor指定的实现类</span>
        <span class="token comment">// 底层会执行创建ExtensionLoader对象等操作，这里不做过多讲解</span>
        <span class="token keyword">return</span> frameworkModel<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">Compressor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>compressorStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、-activate" tabindex="-1"><a class="header-anchor" href="#四、-activate" aria-hidden="true">#</a> 四、@Activate</h2><p>这个注解是用来做适配的，只有在满足@Activate注解里面的参数时，被@Activate修饰的类才会生效</p><p>例如下面的ExceptionFilter，只有在作为服务提供者时才会生效。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">PROVIDER</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span><span class="token punctuation">,</span> <span class="token class-name">Filter<span class="token punctuation">.</span>Listener</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、-adaptive" tabindex="-1"><a class="header-anchor" href="#五、-adaptive" aria-hidden="true">#</a> 五、@Adaptive</h2><p>！！TODO，八嘎 看不懂这个注解咋用</p>`,16),v={href:"https://www.jianshu.com/p/c16aed0b4181",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const t=e("RouterLink"),p=e("ExternalLinkIcon");return c(),i("div",null,[d,n("p",null,[s("java spi: "),a(t,{to:"/java/Java%E5%9F%BA%E7%A1%80/Java%20SPI.html"},{default:l(()=>[s("跳转")]),_:1})]),k,n("p",null,[n("a",v,[s("https://www.jianshu.com/p/c16aed0b4181"),a(p)])])])}const _=o(u,[["render",m],["__file","Dubbo SPI.html.vue"]]);export{_ as default};
