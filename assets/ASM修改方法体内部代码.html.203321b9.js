import{_ as n,V as s,W as a,Y as p}from"./framework.591e63b2.js";const t={},e=p(`<h2 id="一、重写classvisitor" tabindex="-1"><a class="header-anchor" href="#一、重写classvisitor" aria-hidden="true">#</a> 一、重写ClassVisitor</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassEditor</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> oldOwner<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> oldMethodName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> oldMethodDesc<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> newOpcode<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> newOwner<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> newMethodName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> newMethodDesc<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ClassEditor</span><span class="token punctuation">(</span>
            <span class="token keyword">int</span> api<span class="token punctuation">,</span>
            <span class="token class-name">ClassVisitor</span> classVisitor<span class="token punctuation">,</span>
            <span class="token class-name">String</span> oldOwner<span class="token punctuation">,</span>
            <span class="token class-name">String</span> oldMethodName<span class="token punctuation">,</span>
            <span class="token class-name">String</span> oldMethodDesc<span class="token punctuation">,</span>
            <span class="token keyword">int</span> newOpcode<span class="token punctuation">,</span>
            <span class="token class-name">String</span> newOwner<span class="token punctuation">,</span>
            <span class="token class-name">String</span> newMethodName<span class="token punctuation">,</span>
            <span class="token class-name">String</span> newMethodDesc
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> classVisitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>oldOwner <span class="token operator">=</span> oldOwner<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>oldMethodName <span class="token operator">=</span> oldMethodName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>oldMethodDesc <span class="token operator">=</span> oldMethodDesc<span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>newOpcode <span class="token operator">=</span> newOpcode<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>newOwner <span class="token operator">=</span> newOwner<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>newMethodName <span class="token operator">=</span> newMethodName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>newMethodDesc <span class="token operator">=</span> newMethodDesc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span>
            <span class="token keyword">int</span> access<span class="token punctuation">,</span>
            <span class="token class-name">String</span> name<span class="token punctuation">,</span>
            <span class="token class-name">String</span> descriptor<span class="token punctuation">,</span>
            <span class="token class-name">String</span> signature<span class="token punctuation">,</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MethodVisitor</span> mv <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;&lt;init&gt;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">&quot;&lt;clinit&gt;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> isAbstractMethod <span class="token operator">=</span> <span class="token punctuation">(</span>access <span class="token operator">&amp;</span> <span class="token constant">ACC_ABSTRACT</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> isNativeMethod <span class="token operator">=</span> <span class="token punctuation">(</span>access <span class="token operator">&amp;</span> <span class="token constant">ACC_NATIVE</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAbstractMethod <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isNativeMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodReplaceVisitor</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MethodReplaceVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">MethodReplaceVisitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> methodVisitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> methodVisitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>
                <span class="token keyword">int</span> opcode<span class="token punctuation">,</span>
                <span class="token class-name">String</span> owner<span class="token punctuation">,</span>
                <span class="token class-name">String</span> name<span class="token punctuation">,</span>
                <span class="token class-name">String</span> descriptor<span class="token punctuation">,</span>
                <span class="token keyword">boolean</span> isInterface
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断是否需要被替换</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldOwner<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span>
                    <span class="token operator">&amp;&amp;</span> oldMethodName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
                    <span class="token operator">&amp;&amp;</span> oldMethodDesc<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 替换newXXX</span>
                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>newOpcode<span class="token punctuation">,</span> newOwner<span class="token punctuation">,</span> newMethodName<span class="token punctuation">,</span> newMethodDesc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> isInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、验证" tabindex="-1"><a class="header-anchor" href="#二、验证" aria-hidden="true">#</a> 二、验证</h2><p>下面有个Comparator类，getMin方法的实现是错的。看看如何用上面实现的ClassEditor修改回来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Comparator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> retult <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> retult<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> fullClassName <span class="token operator">=</span> <span class="token string">&quot;com.haya.Comparator&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> classReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>fullClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> classWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token class-name">ClassWriter</span><span class="token punctuation">.</span><span class="token constant">COMPUTE_MAXS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> classEditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassEditor</span><span class="token punctuation">(</span><span class="token constant">ASM9</span><span class="token punctuation">,</span> classWriter<span class="token punctuation">,</span>
                <span class="token comment">// 需要修改的Math.max方法</span>
                <span class="token string">&quot;java/lang/Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;max&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(II)I&quot;</span><span class="token punctuation">,</span>
                <span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span>
                <span class="token comment">// 替换成min方法</span>
                <span class="token string">&quot;java/lang/Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;min&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(II)I&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        classReader<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>classEditor<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> buf <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>
                path <span class="token operator">+</span>
                        <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span>
                        fullClassName<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\.&quot;</span><span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token punctuation">)</span> <span class="token operator">+</span>
                        <span class="token string">&quot;.class&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">writeByteArrayToFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","ASM修改方法体内部代码.html.vue"]]);export{k as default};
