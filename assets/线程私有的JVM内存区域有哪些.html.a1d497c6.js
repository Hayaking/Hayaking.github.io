import{_ as a,V as e,W as _,X as t}from"./framework.7aad78ec.js";const r={},h=t('<h1 id="_1-程序计数器" tabindex="-1"><a class="header-anchor" href="#_1-程序计数器" aria-hidden="true">#</a> 1.程序计数器</h1><p>是当前线程所执行的字节码的行号指示器，字节码解释器工作时通过改变计数器的值来选取下一条需要执行的字节码指令。 正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址（当前指令的地址） 。如果还是 Native 方法，则为空。</p><h1 id="_2-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_2-虚拟机栈" aria-hidden="true">#</a> 2.虚拟机栈</h1><p>每个Java方法执行时都会创建一个栈帧到虚拟机栈中。 一个栈帧包括局部变量表，操作栈，动态链接，方法出口等信息。 写递归程序出错时时的栈溢出，就是发生在这里</p><h1 id="_3-本地方法栈" tabindex="-1"><a class="header-anchor" href="#_3-本地方法栈" aria-hidden="true">#</a> 3.本地方法栈</h1><p>与虚拟机栈相同，不过是服务于Native方法的。</p>',6),c=[h];function d(i,n){return e(),_("div",null,c)}const o=a(r,[["render",d],["__file","线程私有的JVM内存区域有哪些.html.vue"]]);export{o as default};
