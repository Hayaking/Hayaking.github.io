import{_ as a,V as s,W as e,a0 as n}from"./framework.1bd1ad73.js";const l={},t=n(`<h2 id="一、过期删除策略" tabindex="-1"><a class="header-anchor" href="#一、过期删除策略" aria-hidden="true">#</a> 一、过期删除策略</h2><p>Redis是可以对数据设置过期时间的，删除过期的数据的就是过期键值删除策略。</p><h3 id="_1-1-设置过期时间的几种方法" tabindex="-1"><a class="header-anchor" href="#_1-1-设置过期时间的几种方法" aria-hidden="true">#</a> 1.1 设置过期时间的几种方法</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 多少秒过期</span>
expire <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>
<span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> ex <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>
setex <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>valule<span class="token operator">&gt;</span>
<span class="token comment"># 多少毫秒过期</span>
pexpire <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>
<span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> px <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>
<span class="token comment"># 到达指定时间戳过期，精确到秒</span>
expireat <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>
<span class="token comment"># 到达指定时间戳过期，精确到毫秒</span>
pexpireat <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span>

<span class="token comment"># 查看剩余过期时间</span>
ttl <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
<span class="token comment"># 取消过期时间</span>
persist <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-原理" tabindex="-1"><a class="header-anchor" href="#_1-2-原理" aria-hidden="true">#</a> 1.2 原理</h3><p>当给一个key设置过期时间后，redis会将该key还有过期时间的时间戳存储到 <mark>过期字典&lt;key,timestamp&gt;</mark> 中。</p><p>当从redis中读取某个key时，redis会先从过期字典中读取这个key。</p><ul><li>如果不在，则正常读取</li><li>如果存在，则会获取该 key 的过期时间，然后与当前系统时间进行比对，如果比系统时间大，那就没有过期，否则判定该 key 已过期。</li></ul><p>就这么简单</p><h3 id="_1-3-过期删除策略有哪些" tabindex="-1"><a class="header-anchor" href="#_1-3-过期删除策略有哪些" aria-hidden="true">#</a> 1.3 过期删除策略有哪些</h3><p>有三种删除策略</p><ul><li>定时删除：在设置 key 的过期时间时，创建一个定时事件，当时间到达时，由事件处理器删除key <ul><li>优点: 保证过期的key尽快删除</li><li>缺点: 有过期时间的key比较多时，会占用比较多的cpu资源</li></ul></li><li>惰性删除（redis采用）：每次访问 key 时，检查key是否过期，如果过期就删除 <ul><li>优点: cpu友好</li><li>缺点: 内存不友好，甚至可能出现内存泄漏</li></ul></li><li>定期删除（redis采用）：定时的从数据库中取出一些key进行检查，删除过期的 <ul><li>优点: cpu、内存友好</li><li>缺点: 难以确定删除操作执行的时长和频率</li></ul></li></ul><h2 id="二、淘汰策略" tabindex="-1"><a class="header-anchor" href="#二、淘汰策略" aria-hidden="true">#</a> 二、淘汰策略</h2><p>如果删除策略漏掉了一部分key，这部分key迟迟没有被删除，久而久之redis内存越来越大，直到到达redis设置的最大内存，就会触发淘汰策略。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置redis最大内存4g</span>
CONFIG SET maxmemory 4gb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-淘汰策略有哪些" tabindex="-1"><a class="header-anchor" href="#_2-1-淘汰策略有哪些" aria-hidden="true">#</a> 2.1 淘汰策略有哪些</h3><p>淘汰策略有八种，分为两类：不进行数据淘汰、进行数据淘汰</p><h4 id="_2-1-1-不进行数据淘汰" tabindex="-1"><a class="header-anchor" href="#_2-1-1-不进行数据淘汰" aria-hidden="true">#</a> 2.1.1 不进行数据淘汰</h4><ul><li>noeviction：默认的内存淘汰策略，什么也不干</li></ul><h4 id="_2-1-2-进行数据淘汰" tabindex="-1"><a class="header-anchor" href="#_2-1-2-进行数据淘汰" aria-hidden="true">#</a> 2.1.2 进行数据淘汰</h4><h5 id="_2-1-2-1-淘汰有过期时间的数据" tabindex="-1"><a class="header-anchor" href="#_2-1-2-1-淘汰有过期时间的数据" aria-hidden="true">#</a> 2.1.2.1 淘汰有过期时间的数据</h5><ul><li>volatile-random：随机淘汰设置了过期时间的任意键值；</li><li>volatile-ttl：优先淘汰更早过期的键值。</li><li>volatile-lru（Redis3.0 之前，默认的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最久未使用的键值；</li><li>volatile-lfu（Redis 4.0 后新增的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最少使用的键值；</li></ul><h5 id="_2-1-2-2-淘汰所有的数据" tabindex="-1"><a class="header-anchor" href="#_2-1-2-2-淘汰所有的数据" aria-hidden="true">#</a> 2.1.2.2 淘汰所有的数据</h5><ul><li>allkeys-random：随机淘汰任意键值;</li><li>allkeys-lru：淘汰整个键值中最久未使用的键值；</li><li>allkeys-lfu（Redis 4.0 后新增的内存淘汰策略）：淘汰整个键值中最少使用的键值。</li></ul><h3 id="_2-2-设置淘汰策略" tabindex="-1"><a class="header-anchor" href="#_2-2-设置淘汰策略" aria-hidden="true">#</a> 2.2 设置淘汰策略</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前淘汰策略</span>
config get maxmemory-policy
<span class="token comment"># 设置淘汰策略</span>
config <span class="token builtin class-name">set</span> maxmemory-policy <span class="token operator">&lt;</span>策略<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),i=[t];function r(o,p){return s(),e("div",null,i)}const c=a(l,[["render",r],["__file","3.过期淘汰.html.vue"]]);export{c as default};
