import{_ as i,V as l,W as r,X as a,Z as e,$ as n,a0 as d,Y as t,y as c}from"./framework.44032428.js";const o={},p=t(`<h2 id="一、string" tabindex="-1"><a class="header-anchor" href="#一、string" aria-hidden="true">#</a> 一、String</h2><p>String是redis中最常用的数据类型，一个key对应一个字符串。</p><h3 id="_1-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-使用场景" aria-hidden="true">#</a> 1.1 使用场景</h3><ul><li>缓存：将数据序列化为字符串，存储在redis中</li><li>记录token</li><li>计数器</li><li>分布式锁</li></ul><h3 id="_1-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_1-2-常用命令" aria-hidden="true">#</a> 1.2 常用命令</h3><table><tbody><tr><th style="width:40%;">命令</th><th>描述</th></tr><tr><td>SET key value</td><td>设置key的值</td></tr><tr><td>GET key</td><td>获取key的值</td></tr><tr><td>GETRANGE key start end </td><td>获取指定key的字符串的子串，start和end指定子串起始和结束位置</td></tr><tr><td>GETSET key value</td><td>将key对应的值设为value，并返回key的旧值</td></tr><tr><td>MGET key1 [key2..]</td><td>获取一个或多个key的值</td></tr><tr><td>SETEX key seconds value</td><td>设置key的值，并设置key的过期时间为seconds秒</td></tr><tr><td>SETNX key value</td><td>只有在key不存在时，设置key的值</td></tr><tr><td>STRLEN key</td><td>获取key的值的字符串长度</td></tr><tr><td>MSET key value [key value ...]</td><td>同时设置一个或多个key的值</td></tr><tr><td>MSETNX key value [key value ...]</td><td>同时设置一个或多个key的值，当且仅当所有给定 key 都不存在</td></tr><tr><td>PSETEX key milliseconds value</td><td>跟setex一样，只不过过期时间的单位是毫秒</td></tr><tr><td>INCR key</td><td>将key中储存的数字值加一</td></tr><tr><td>INCRBY key increment</td><td>将key 所储存的值加上给定的增量值（increment）</td></tr><tr><td>DECR key</td><td>将key中储存的数字值减一</td></tr><tr><td>DECRBY key decrement</td><td>key 所储存的值减去给定的减量值（decrement）</td></tr><tr><td>APPEND key value</td><td>如果 key 已经存在并且是一个字符串， 将value追加到key的值的末尾</td></tr></tbody></table><h3 id="_1-3-底层实现" tabindex="-1"><a class="header-anchor" href="#_1-3-底层实现" aria-hidden="true">#</a> 1.3 底层实现</h3><blockquote><p>字符串对象的编码可以是int、raw或者embstr</p></blockquote><ul><li>int: 如果一个字符串对象保存的是整数值,redis底层会用long去存储</li><li>raw: 如果存的是字符串，并且这个字符串值的长度大于32字节，那么使用SDS保存这个字符串</li><li>embstr: 小于等于32字节时，也是SDS redis的字符串表示为sds(simple dynamic string)，而不是C语言的字符串(以\\0结尾的char*)。</li></ul><h4 id="_1-3-1-sds组成" tabindex="-1"><a class="header-anchor" href="#_1-3-1-sds组成" aria-hidden="true">#</a> 1.3.1 sds组成</h4><ul><li>len: 字符串长度</li><li>buf[]: 字符数组，用来保存实际数据</li><li>alloc: 分配给字符数组的空间长度。修改字符串时，可以通过 alloc - len判断剩余空间是否足够，不足够时sds会扩容</li><li>flags: 用来表示不同类型的SDS。sds有5种类型: sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64。区别就在于，它们len和alloc的数据类型不同。</li></ul><h4 id="_1-3-2-为什么不用c语言的的字符串" tabindex="-1"><a class="header-anchor" href="#_1-3-2-为什么不用c语言的的字符串" aria-hidden="true">#</a> 1.3.2 为什么不用c语言的的字符串</h4><ul><li>获取字符串长度的时间复杂度是O(n)。 而sds有一个专门存储字符串长度的属性len，时间复杂度O(1)</li><li>二进制不安全。c语言用\\0标识字符串结尾，而sds不依赖\\0(以为属性len，知道了字符串长度), 因此不会因为数据包含\\0而导致数据出问题</li><li>缓冲区溢出。拼接字符串时，C语言使用strcat拼接，当没有分配足够长度的内存空间，就会造成缓冲区溢出</li></ul><h2 id="二、list" tabindex="-1"><a class="header-anchor" href="#二、list" aria-hidden="true">#</a> 二、List</h2><p>Redis中的List是简单的字符串List，List里面存储的都是String类型。</p><h3 id="_2-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_2-1-使用场景" aria-hidden="true">#</a> 2.1 使用场景</h3><ul><li>模拟栈</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lpush key value <span class="token comment">#入栈</span>
lpop key <span class="token comment">#出栈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>模拟队列</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lpush key value <span class="token comment">#入队列</span>
rpop key <span class="token comment">#出队列</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_2-2-常用命令" aria-hidden="true">#</a> 2.2 常用命令</h3><table><tbody><tr><th style="width:40%;">命令</th><th>描述</th></tr><tr><td>RPUSH key value</td><td>将value添加到列表右端（尾部）</td></tr><tr><td>LPUSH key value</td><td>将value添加到列表左端（头部）</td></tr><tr><td>RPOP key</td><td>从列表的右端（尾部）的值弹出并返回弹出的值</td></tr><tr><td>LPOP key</td><td>从列表的左端（头部）的值弹出并返回弹出的值</td></tr><tr><td>LRANGE key start stop</td><td>获取列表中指定范围的值</td></tr><tr><td>LINDEX key index</td><td>获取列表中指定位置的值</td></tr><tr><td>LTRIM key start stop</td><td>只保留列表中指定区间内的元素</td></tr><tr><td>BLPOP key timeout</td><td>从列表的左端（头部）的值弹出并返回弹出的值，如果列表中没有元素，就等待，直到超时或有元素可以弹出为止</td></tr></tbody></table><h3 id="_2-3-底层实现" tabindex="-1"><a class="header-anchor" href="#_2-3-底层实现" aria-hidden="true">#</a> 2.3 底层实现</h3><ul><li>双向链表</li><li><a href="#_2-3-2-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8-ziplist">压缩列表</a></li><li>快表 quicklist</li></ul><h4 id="_2-3-1-双向链表" tabindex="-1"><a class="header-anchor" href="#_2-3-1-双向链表" aria-hidden="true">#</a> 2.3.1 双向链表</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">{</span>
    <span class="token comment">//链表头节点</span>
    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>
    <span class="token comment">//链表尾节点</span>
    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>
    <span class="token comment">//节点值复制函数</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//节点值释放函数</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//节点值比较函数</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//链表节点数量</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span> list<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点:</p><ul><li>因为是双向链表，所以获取某个节点的前置节点或后置节点的时间复杂度只需O(1)</li><li>因为存储了头结点、尾结点指针，所以获取时的时间复杂度只需O(1)</li><li>因为存储了len，所以获取链表长度的时间复杂度只需O(1)</li></ul><p>缺点:</p><ul><li>链表的节点之间在内存中不一定连续，没有数组访问起来快速</li><li>链表的节点存储开销比较大，比较占内存</li></ul><h4 id="_2-3-2-压缩列表-ziplist" tabindex="-1"><a class="header-anchor" href="#_2-3-2-压缩列表-ziplist" aria-hidden="true">#</a> 2.3.2 压缩列表(ZipList)</h4><p>压缩列表是一种内存紧凑型的数据结构。其占用一块连续的内存空间，而且会针对不同长度的数据，进行相应编码，能够有效地节省内存开销。</p><p>优点:</p><ul><li>连续的内存空间。可以利用 CPU 缓存，访问快速</li><li>针对性的编码。能够节省内存开销</li></ul><p>缺点:</p><ul><li>不能保存过多的元素，否则查询效率就会降低</li><li>新增或修改某个元素时，压缩列表占用的内存空间需要重新分配，甚至可能引发连锁更新的问题，影响数据访问</li></ul><blockquote><p>压缩列表只适用于元素数量较少的情况</p></blockquote><h4 id="_2-3-3-快表-quicklist" tabindex="-1"><a class="header-anchor" href="#_2-3-3-快表-quicklist" aria-hidden="true">#</a> 2.3.3 快表 quicklist</h4><p>快表是一个数组链表，为什么这么说？因为它的链表节点是一个压缩列表</p><h2 id="三、set" tabindex="-1"><a class="header-anchor" href="#三、set" aria-hidden="true">#</a> 三、Set</h2><p>Redis中的Set是无序字符串集合，集合中的成员是唯一的。</p><h3 id="_3-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_3-1-使用场景" aria-hidden="true">#</a> 3.1 使用场景</h3><ul><li>点赞：使用set存储点赞用户的uid，保证一个用户只能点一个赞</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd key uid  <span class="token comment">#点赞(/收藏) </span>
srem key uid  <span class="token comment">#取消点赞（/收藏）</span>
smembers key     <span class="token comment"># 获取所有点赞(/收藏)用户  </span>
scard key  <span class="token comment"># 获取点赞用户数量</span>
sismember key uid <span class="token comment">#判断是否点赞(/收藏)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>好友关系: 使用set计算交集、差集等</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd uid1 <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> 
sadd uid2 <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> --某个user的好友id放入集合
sinter uid uid2 --获取共同好友
<span class="token function">sdiff</span> uid uid2 --给user2推荐user1的好友
sismember uid1 <span class="token number">5</span>
sismember uid2 <span class="token number">5</span> --验证某个用户是否同时被user1和user2关注
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-2-常用命令" aria-hidden="true">#</a> 3.2 常用命令</h3><table><tbody><tr><th style="width:40%;">命令</th><th>描述</th></tr><tr><td>SADD key value1 [value2]</td><td>向集合添加一个或多个成员 </td></tr><tr><td>SREM key value1 [value2]</td><td>移除集合中一个或多个成员 </td></tr><tr><td>SCARD key</td><td>获取集合成员数</td></tr><tr><td>SMEMBERS key</td><td>获取集合中的所有值</td></tr><tr><td>SMEMBERS key member</td><td>判断member是否是在集合中 </td></tr><tr><td>SINTER key1 [key2]</td><td>返回给定集合的交集</td></tr><tr><td>SDIFF key1 [key2]</td><td>返回第一个集合与其他集合之间的差集</td></tr></tbody></table><h3 id="_3-3-底层实现" tabindex="-1"><a class="header-anchor" href="#_3-3-底层实现" aria-hidden="true">#</a> 3.3 底层实现</h3><ul><li>intset 整数集合</li><li>hashtable</li></ul><p>intset编码的集合对象使用整数集合作为底层实现，集合对象包含的所有元素都被保存在整数集合里面，hashtable跟java中的hashmap实现原理一样，不再赘述</p><h2 id="四、hash" tabindex="-1"><a class="header-anchor" href="#四、hash" aria-hidden="true">#</a> 四、Hash</h2><p>Redis中的Hash是就类似于java中的map对象</p><h3 id="_4-1应用场景" tabindex="-1"><a class="header-anchor" href="#_4-1应用场景" aria-hidden="true">#</a> 4.1应用场景</h3><ul><li>缓存：多数场景下是将数据序列化成json字符串，存储成string类型。当有频繁读取或修改数据中的某个字段时，可以考虑使用hash存储数据，避免反复序列化、反序列化导致的性能开销。以下是一个购物车场景:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加商品</span>
hset cart:<span class="token punctuation">{</span>用户id<span class="token punctuation">}</span> <span class="token punctuation">{</span>商品id<span class="token punctuation">}</span> <span class="token number">1</span>  
<span class="token comment"># 增加数量</span>
hincrby cart:<span class="token punctuation">{</span>用户id<span class="token punctuation">}</span> <span class="token punctuation">{</span>商品id<span class="token punctuation">}</span> <span class="token number">1</span> 
<span class="token comment"># 获取商品类型总数</span>
hlen cart:<span class="token punctuation">{</span>用户id<span class="token punctuation">}</span> 
<span class="token comment"># 删除商品</span>
hdel cart:<span class="token punctuation">{</span>用户id<span class="token punctuation">}</span> <span class="token punctuation">{</span>商品id<span class="token punctuation">}</span> 
<span class="token comment"># 获取购物车所有商品</span>
hgetall cart:<span class="token punctuation">{</span>用户id<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分布式锁: Redisson在实现分布式锁时，用的不是string，而是hash</li></ul><h3 id="_4-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_4-2-常用命令" aria-hidden="true">#</a> 4.2 常用命令</h3><table><tbody><tr><th style="width:40%;">命令</th><th>描述</th></tr><tr><td>HSET key field value</td><td>set值</td></tr><tr><td>HDEL key field</td><td>删除值</td></tr><tr><td>HLEN key</td><td>获取field数量</td></tr><tr><td>HINCRBY key field</td><td>给指定的field值加一</td></tr><tr><td>HKEYS key</td><td>获取所有field</td></tr><tr><td>HVALS key</td><td>获取所有field对应的值</td></tr><tr><td>HGETALL key</td><td>获取所有field对应的值</td></tr></tbody></table><h3 id="_4-3-底层实现" tabindex="-1"><a class="header-anchor" href="#_4-3-底层实现" aria-hidden="true">#</a> 4.3 底层实现</h3><ul><li><a href="#_2-3-2-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8-ziplist">压缩列表</a></li><li>hashtable</li></ul><p>压缩列表上面讲过，hashtable跟java中的hashmap实现原理一样，不再赘述。</p><h2 id="五、zset" tabindex="-1"><a class="header-anchor" href="#五、zset" aria-hidden="true">#</a> 五、ZSet</h2><p>Set是无序的，ZSet是有序的，实现有序的方式是引入score字段，通过score进行升序排列。</p><h3 id="_5-1-应用场景" tabindex="-1"><a class="header-anchor" href="#_5-1-应用场景" aria-hidden="true">#</a> 5.1 应用场景</h3>`,65),u=a("li",null,"排行榜",-1),h=t('<h3 id="_5-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_5-2-常用命令" aria-hidden="true">#</a> 5.2 常用命令</h3><table><tbody><tr><th style="width:40%;">命令</th><th>描述</th></tr><tr><td>ZADD key score1 member1</td><td>向集合添加一个或多个成员 </td></tr><tr><td>ZCARD key</td><td>获取集合成员数 </td></tr><tr><td>ZCOUNT key min max</td><td>计算score在min~max之间的成员个数</td></tr><tr><td>ZINCRBY key increment member</td><td>给定成员的score增加member</td></tr><tr><td>ZRANGE key start stop [WITHSCORES]</td><td>返回index在start~stop之间的成员</td></tr><tr><td>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</td><td>返回score在min~max之间的成员</td></tr><tr><td>zrank key member</td><td>获取member在集合中的正向排名</td></tr><tr><td>zrevrank key member</td><td>获取member在集合中的逆向排名</td></tr></tbody></table><h3 id="_5-3-底层实现" tabindex="-1"><a class="header-anchor" href="#_5-3-底层实现" aria-hidden="true">#</a> 5.3 底层实现</h3>',3),k=a("li",null,[a("a",{href:"#_2-3-2-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8-ziplist"},"压缩列表")],-1),m=t('<h2 id="六、hyperloglogs" tabindex="-1"><a class="header-anchor" href="#六、hyperloglogs" aria-hidden="true">#</a> 六、HyperLogLogs</h2><p>HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的</p><h3 id="_6-1-应用场景" tabindex="-1"><a class="header-anchor" href="#_6-1-应用场景" aria-hidden="true">#</a> 6.1 应用场景</h3><ul><li>计数器</li></ul><h3 id="_6-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_6-2-常用命令" aria-hidden="true">#</a> 6.2 常用命令</h3><table><tbody><tr><th style="width:40%;">命令</th><th>描述</th></tr><tr><td>PFADD key element [element ...]</td><td>添加元素到HyperLogLog 中</td></tr><tr><td>PFCOUNT key [key ...]</td><td>返回HyperLogLog计算的元素个数</td></tr><tr><td>PFMERGE newKey key1 [key2 ...]</td><td>合并多个HyperLogLog</td></tr></tbody></table>',6);function b(v,y){const s=c("RouterLink");return l(),r("div",null,[p,a("ul",null,[u,a("li",null,[e("滑动窗口: "),n(s,{to:"/java/%E5%85%B6%E5%AE%83/%E5%9F%BA%E4%BA%8Ezset%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.html"},{default:d(()=>[e("跳转")]),_:1})])]),h,a("ul",null,[k,a("li",null,[n(s,{to:"/algo/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%B7%B3%E8%A1%A8.html"},{default:d(()=>[e("跳表")]),_:1})])]),m])}const E=i(o,[["render",b],["__file","1.数据类型.html.vue"]]);export{E as default};
