const e=JSON.parse('{"key":"v-15c9a447","path":"/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/CGlib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html","title":"CGlib动态代理","lang":"zh-CN","frontmatter":{"author":"haya","title":"CGlib动态代理","date":"2019-06-16T00:00:00.000Z","article":true,"timeline":true,"category":["java"],"tag":["java","设计模式"],"description":"CGLIB 动态代理代理有两个核心的类：MethodInterceptor、Enhancer。MethodInterceptor类似于上述的InvocationHandler，Enhancer类似于Proxy。 UserServiceImpl 测试： JDK 动态代理 和 CGLIB动态代理 的对比 JDK动态代理：基于Java反射机制实现，必须要实现...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/CGlib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Haya的博客"}],["meta",{"property":"og:title","content":"CGlib动态代理"}],["meta",{"property":"og:description","content":"CGLIB 动态代理代理有两个核心的类：MethodInterceptor、Enhancer。MethodInterceptor类似于上述的InvocationHandler，Enhancer类似于Proxy。 UserServiceImpl 测试： JDK 动态代理 和 CGLIB动态代理 的对比 JDK动态代理：基于Java反射机制实现，必须要实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-28T11:33:06.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"haya"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2019-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-28T11:33:06.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"JDK 动态代理 和 CGLIB动态代理 的对比","slug":"jdk-动态代理-和-cglib动态代理-的对比","link":"#jdk-动态代理-和-cglib动态代理-的对比","children":[]}],"git":{"createdTime":1672227186000,"updatedTime":1672227186000,"contributors":[{"name":"guohaoyang","email":"haoyang.guo@duobei.com","commits":1}]},"readingTime":{"minutes":1.45,"words":435},"autoDesc":true,"localizedDate":"2019年6月16日","filePathRelative":"java/设计模式/CGlib动态代理.md"}');export{e as data};
