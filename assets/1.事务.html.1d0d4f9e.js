import{_ as i,V as e,W as l,a0 as a}from"./framework.1bd1ad73.js";const d={},r=a('<h2 id="一、事务特性" tabindex="-1"><a class="header-anchor" href="#一、事务特性" aria-hidden="true">#</a> 一、事务特性</h2><ul><li>原子性： 事务所包含的一系列数据库操作要么全部成功执行，要么全部回滚</li><li>一致性： 数据库事务的一致性是指：在事务开始以前，数据库中的数据有一个一致的状态。 在事务完成后，数据库中的事务也应该保持这种一致性。事务应该将数据从一个一致性状态转移到另一个一致性状态。 比如在银行转账操作后两个账户的总额应当不变。</li><li>隔离性：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。</li><li>持久性：事务完成后，事务对数据库的所有更新将被保存到数据库，即使系统崩溃，修改的数据页不会丢失</li></ul><h2 id="二、事务如何实现" tabindex="-1"><a class="header-anchor" href="#二、事务如何实现" aria-hidden="true">#</a> 二、事务如何实现</h2><ul><li>事务的隔离性是通过数据库锁和 MVCC 的机制实现的</li><li>持久性通过 redo log（重做日志）来实现</li><li>原子性和一致性通过 Undo log（回撤日志）来实现。 <ul><li>Undo Log 的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为 Undo Log）。然后进行数据的修改。如果出现了错误或者用户执行了 roll back 语句，系统可以利用 Undo Log 中的备份将数据恢复到事务开始之前的状态。</li><li>和 Undo Log 相反，Redo Log 记录的是新数据的备份。在事务提交前，只要将 RedoLog 持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是 RedoLog 已经持久化。系统可以根据 Redo Log 的内容，将所有数据恢复到最新的状态。</li></ul></li></ul><h2 id="三、事务并发问题" tabindex="-1"><a class="header-anchor" href="#三、事务并发问题" aria-hidden="true">#</a> 三、事务并发问题</h2><ul><li>脏读：并发事务中，一个事务读到了另一个未提交事务修改过的数据</li><li>不可重复读：一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。</li><li>幻读：在一个事务两次读取的之间，有新的数据提交</li></ul><h2 id="四、事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#四、事务的隔离级别" aria-hidden="true">#</a> 四、事务的隔离级别</h2><ul><li><p>读未提交：可以读取事务中修改但未提交的数据。会出现：脏读、不可重复读、幻读</p></li><li><p>读已提交：在事务未提交之前，只能查询到旧值。会出现：不可重复的、幻读</p></li><li><p>可重复读(默认)：事务 B 只能在事务 A 修改过数据并提交后，自己也提交事务后，才能读取到事务 B 修改的数据。会出现幻读。</p><ul><li><p>为什么上了写锁（写操作），别的事务还可以读操作？</p><p>因为 InnoDB 有 MVCC 机制（多版本并发控制），可以使用快照读，而不会被阻塞。</p></li></ul></li><li><p>串行化：除了读读操作不会阻塞，其他都会阻塞</p></li></ul><blockquote><p>MySql 使用不同的锁策略 (Locking Strategy)/MVCC 来实现四种不同的隔离级别。</p><p>读提交、可重复读的实现原理跟 MVCC 有关</p><p>读未提交和串行化跟锁有关。</p></blockquote><h2 id="五、隔离级别的实现原理" tabindex="-1"><a class="header-anchor" href="#五、隔离级别的实现原理" aria-hidden="true">#</a> 五、隔离级别的实现原理</h2><h3 id="_5-1-mvcc" tabindex="-1"><a class="header-anchor" href="#_5-1-mvcc" aria-hidden="true">#</a> 5.1 MVCC</h3><p>多版本并发控制（MVCC），它是通过读取历史版本的数据，来降低并发事务冲突，从而提高并发性能的一种机制。它的实现依赖于隐式字段、undo 日志、快照读 &amp; 当前读、Read View。</p><h4 id="_5-1-1-隐式字段" tabindex="-1"><a class="header-anchor" href="#_5-1-1-隐式字段" aria-hidden="true">#</a> 5.1.1 隐式字段</h4><p>InnoDB 存储引擎，每一行记录都有两个隐藏列 DB_TRX_ID、DB_ROLL_PTR</p><ul><li>DB_TRX_ID，记录每一行最近一次修改（修改 / 更新）它的事务 ID</li><li>DB_ROLL_PTR，相当于一个指针，指向回滚段的 undo 日志</li></ul><p>版本链：多个事务并行操作某一行数据时，不同事务对该行数据的修改会产生多个版本，然后通过回滚指针（DB_ROLL_PTR）连一条 Undo 日志链。</p><h4 id="_5-1-2-read-view" tabindex="-1"><a class="header-anchor" href="#_5-1-2-read-view" aria-hidden="true">#</a> 5.1.2 Read View</h4><p>Read View 保存着对当前事务可见的数据。</p><p>生成Read View依赖下面四个字段：</p><ul><li>活跃的事务ids（trx_ids）: 表示在生成ReadView时当前系统中活跃的读写事务的事务id列表</li><li>最小活跃事务id（up_limit_id）: 活跃的事务ids中，最小的那个id</li><li>待分配的事务id（low_limit_id）: 分配给下一个事务的id</li><li>当前事务id（creator_trx_id）: 表示生成该 ReadView 的事务的 事务id</li></ul><p>生成Read View时，会去读取数据所在行的版本链，会根据链上每个记录的DB_TRX_ID判断，生成Read View。具体规则如下：</p><ul><li>DB_TRX_ID=当前事务id，说明是当前事务修改的记录，对当前事务可见</li><li>DB_TRX_ID&lt;最小活跃事务id, 说明修改该版本的记录的事务在当前事务生成Read View时就已经提交，对当前事务可见</li><li>DB_TRX_ID&gt;=待分配的事务id, 说明修改该版本的记录的事务是在当前事务之后产生的，对当前事务不可见</li><li>待分配的事务id&gt;DB_TRX_ID&gt;=最小活跃事务id, 需要判断DB_TRX_ID是否还在活跃的事务ids中，如果在，对当前事务不可见；不在，则对当前事务可见</li></ul><blockquote><p>只有在select的时候才会创建ReadView</p></blockquote><h3 id="_5-2-不同级别的实现" tabindex="-1"><a class="header-anchor" href="#_5-2-不同级别的实现" aria-hidden="true">#</a> 5.2 不同级别的实现</h3><ul><li>读未提交：未用到mvcc</li><li>读已提交: 每次select时，都会重新生成Read View。有不可重复度的问题</li><li>可重复读: 只有在事务开始时生成一次Read View。解决了不可重复度的问题</li></ul><h3 id="_5-3-当前读-快照读" tabindex="-1"><a class="header-anchor" href="#_5-3-当前读-快照读" aria-hidden="true">#</a> 5.3 当前读&amp;快照读</h3><p>了解到了Read View, 在读已提交、可重复读的场景下</p><ul><li>select 语句默认是快照读</li><li>select 语句加锁是当前读</li><li>update 语句是当前读</li></ul><h3 id="_5-4-mvcc解决幻读了吗" tabindex="-1"><a class="header-anchor" href="#_5-4-mvcc解决幻读了吗" aria-hidden="true">#</a> 5.4 MVCC解决幻读了吗？</h3><ul><li>针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读，因为可重复读隔离级别下，事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，即使中途有其他事务插入了一条数据，是查询不出来这条数据的，所以就很好了避免幻读问题。</li><li>针对当前读（select ... for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读，因为当执行 select ... for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。</li></ul>',30),h=[r];function t(o,c){return e(),l("div",null,h)}const _=i(d,[["render",t],["__file","1.事务.html.vue"]]);export{_ as default};
