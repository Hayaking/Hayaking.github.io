const t=JSON.parse('{"key":"v-6df343d6","path":"/java/%E5%85%B6%E5%AE%83/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.html","title":"缓存一致性","lang":"zh-CN","frontmatter":{"author":"haya","title":"缓存一致性","date":"2021-01-23T00:00:00.000Z","article":true,"timeline":true,"category":["java"],"tag":["redis","缓存"],"description":"❎先更数据库，再更缓存; ❎先更缓存，再更数据库; ❎先删缓存，再更数据库; ✔️先更数据库，再删缓存: 理论上这种情况是会出现缓存不一致的情况，但是在实际中发生的概率很低。因为数据库操作远比缓存操作要慢。; 解耦数据库操作、缓存操作; 单独写个程序订阅mysql binglog，有数据变更时，删除对应的缓存;","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/java/%E5%85%B6%E5%AE%83/%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"Haya的博客"}],["meta",{"property":"og:title","content":"缓存一致性"}],["meta",{"property":"og:description","content":"❎先更数据库，再更缓存; ❎先更缓存，再更数据库; ❎先删缓存，再更数据库; ✔️先更数据库，再删缓存: 理论上这种情况是会出现缓存不一致的情况，但是在实际中发生的概率很低。因为数据库操作远比缓存操作要慢。; 解耦数据库操作、缓存操作; 单独写个程序订阅mysql binglog，有数据变更时，删除对应的缓存;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-04T08:09:56.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"haya"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:tag","content":"缓存"}],["meta",{"property":"article:published_time","content":"2021-01-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-04T08:09:56.000Z"}]]},"excerpt":"","headers":[],"git":{"createdTime":1672819796000,"updatedTime":1672819796000,"contributors":[{"name":"guohaoyang","email":"haoyang.guo@duobei.com","commits":1}]},"readingTime":{"minutes":0.46,"words":139},"autoDesc":true,"localizedDate":"2021年1月23日","filePathRelative":"java/其它/缓存一致性.md"}');export{t as data};
